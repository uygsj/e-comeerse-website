import React, { useState, useEffect, useCallback } from "react";
import MovieList from "./MovieList";
import AddMovie from "./AddMovie";

const Movies = () => {
  const [movies, setMovies] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // Set a flag to determine if movies should be fetched
  const [shouldFetchMovies, setShouldFetchMovies] = useState(true);

  const fetchMoviesHandler = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Fetch data from the first API
      const response = await fetch('https://swapi.dev/api/films/');
      if (!response.ok) {
        throw new Error("Failed to fetch movies from the first API.");
      }
      const data = await response.json();

      const loadedMovies = data.results.map((movie) => ({
        id: movie.episode_id,
        title: movie.title,
        openingText: movie.opening_crawl,
        releaseDate: movie.release_date,
      }));

      setMovies(loadedMovies);
    } catch (error) {
      setError(error.message);
    }
    setIsLoading(false);
  }, []);

  // Fetch movies only when shouldFetchMovies is true
  useEffect(() => {
    if (shouldFetchMovies) {
      fetchMoviesHandler();
      // Reset the flag after fetching
      setShouldFetchMovies(false);
    }
  }, [fetchMoviesHandler, shouldFetchMovies]);

  async function addMovieHandler(movie) {
    try {
      const response = await fetch('https://react-http-1a3d9-default-rtdb.firebaseio.com/movies.json', {
        method: 'POST',
        body: JSON.stringify(movie),
        headers: {
          'Content-Type': 'application/json',
        },
      });
  
      if (!response.ok) {
        throw new Error('Failed to add the movie. Status: ' + response.status);
      }
  
      // After successfully adding the movie to the database, update the state
      const data = await response.json();
      setMovies((prevMovies) => [
        ...prevMovies,
        {
          id: data.name, // 'name' is the unique key generated by Firebase
          ...movie,
        },
      ]);
    } catch (error) {
      setError(error.message);
    }
  }
  
  async function deleteMovieHandler(id) {
    try {
      const response = await fetch(`https://react-http-1a3d9-default-rtdb.firebaseio.com/movies/${id}.json`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw  Error('Failed to delete the movie. Status: ' + response.status);
      }

      // Fetch the updated list of movies after deletion
      setShouldFetchMovies(true);
    } catch (error) {
      setError(error.message);
    }
  }

  let content = <p>Found no movies.</p>;

  if (movies.length > 0) {
    content = <MovieList movies={movies} onDeleteMovie={deleteMovieHandler} />;
  }

  if (error) {
    content = <p>{error}</p>;
  }

  if (isLoading) {
    content = <p>Loading...</p>;
  }

  return (
    <React.Fragment>
      <section>
        <AddMovie onAddMovie={addMovieHandler} />
        <MovieList movies={movies} onDeleteMovie={deleteMovieHandler} />
      </section>
      <section>
        <button onClick={() => setShouldFetchMovies(true)}>Fetch Movies</button>
      </section>
      <section>{content}</section>
    </React.Fragment>
  );
};

export default Movies;
